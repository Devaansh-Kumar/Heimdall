// Code generated by bpf2go; DO NOT EDIT.
//go:build (386 || amd64) && linux

package syscallfilter

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type syscallfilterFilterRule struct{ CgroupId uint64 }

type syscallfilterProcessInfo struct {
	Pid       uint32
	Uid       uint32
	MntNsId   uint32
	SyscallNr uint32
	CgroupId  uint64
	Comm      [16]uint8
}

// loadSyscallfilter returns the embedded CollectionSpec for syscallfilter.
func loadSyscallfilter() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_SyscallfilterBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load syscallfilter: %w", err)
	}

	return spec, err
}

// loadSyscallfilterObjects loads syscallfilter and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*syscallfilterObjects
//	*syscallfilterPrograms
//	*syscallfilterMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadSyscallfilterObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadSyscallfilter()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// syscallfilterSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type syscallfilterSpecs struct {
	syscallfilterProgramSpecs
	syscallfilterMapSpecs
	syscallfilterVariableSpecs
}

// syscallfilterProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type syscallfilterProgramSpecs struct {
	SysCallBlock *ebpf.ProgramSpec `ebpf:"sys_call_block"`
}

// syscallfilterMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type syscallfilterMapSpecs struct {
	Events    *ebpf.MapSpec `ebpf:"events"`
	FilterMap *ebpf.MapSpec `ebpf:"filter_map"`
	KprobeMap *ebpf.MapSpec `ebpf:"kprobe_map"`
}

// syscallfilterVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type syscallfilterVariableSpecs struct {
}

// syscallfilterObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadSyscallfilterObjects or ebpf.CollectionSpec.LoadAndAssign.
type syscallfilterObjects struct {
	syscallfilterPrograms
	syscallfilterMaps
	syscallfilterVariables
}

func (o *syscallfilterObjects) Close() error {
	return _SyscallfilterClose(
		&o.syscallfilterPrograms,
		&o.syscallfilterMaps,
	)
}

// syscallfilterMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadSyscallfilterObjects or ebpf.CollectionSpec.LoadAndAssign.
type syscallfilterMaps struct {
	Events    *ebpf.Map `ebpf:"events"`
	FilterMap *ebpf.Map `ebpf:"filter_map"`
	KprobeMap *ebpf.Map `ebpf:"kprobe_map"`
}

func (m *syscallfilterMaps) Close() error {
	return _SyscallfilterClose(
		m.Events,
		m.FilterMap,
		m.KprobeMap,
	)
}

// syscallfilterVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadSyscallfilterObjects or ebpf.CollectionSpec.LoadAndAssign.
type syscallfilterVariables struct {
}

// syscallfilterPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadSyscallfilterObjects or ebpf.CollectionSpec.LoadAndAssign.
type syscallfilterPrograms struct {
	SysCallBlock *ebpf.Program `ebpf:"sys_call_block"`
}

func (p *syscallfilterPrograms) Close() error {
	return _SyscallfilterClose(
		p.SysCallBlock,
	)
}

func _SyscallfilterClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed syscallfilter_x86_bpfel.o
var _SyscallfilterBytes []byte
